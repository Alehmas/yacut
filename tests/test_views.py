import pytest

from yacut.models import URL_map

py_url = 'https://www.python.org'


def test_index_form_get(client):
    got = client.get('/')
    assert got.status_code == 200
    assert b'form' in got.data, (
        'Add form to page context `index`'
    )


def test_index_form_post(client):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    })
    assert got.status_code == 200, (
        'On form submission, the main page should return status `200`'
    )
    unique_id = URL_map.query.filter_by(original=py_url, short='py').first()
    assert unique_id, (
        'After submitting the form, a new entry should be created in the database.'
    )
    assert '<a href="http://localhost/py"' in got.data.decode('utf-8'), (
        'After submitting the form, the generated link should display on the main page.'
    )


def test_duplicated_url_in_form(client, short_python_url):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    }, follow_redirects=True)
    assert 'The name py is already taken!' in got.data.decode('utf-8'), (
        'If the short name for the link received in the request is already taken - on the main page '
        'after submitting the form, the text "The name <short_name> is already taken!" should be displayed!'
    )


def test_get_unique_short_id(client):
    got = client.post('/', data={
        'original_link': py_url,
    })
    assert got.status_code == 200, (
        'On form submission with no shortlink value set '
        'the main page should return status code `200`'
    )
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert unique_id, (
        'On form submission with no shortlink value set '
        'a new record must be created in the database.'
    )
    assert f'Your new link is ready: http://localhost:5000/{unique_id.short}', (
        'After submitting a form with no shortlink value set '
        'the generated link should be displayed on the main page.'
    )


def test_redirect_url(client, short_python_url):
    got = client.get(f'/{short_python_url.short}')
    assert got.status_code == 302, (
        'When redirecting to a short address, make sure the status code `302` is returned'
    )
    assert got.location == short_python_url.original, (
        'When redirecting to a short address, make sure the original address is correct'
    )


def test_len_short_id_form(client):
    long_string = 'CuriosityisnotasinHarryHoweverfromtimetotimeyoushouldexercisecaution'
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': long_string,
    })
    assert 'Your new link is ready' not in got.data.decode('utf-8'), (
        'If a short link name longer than 16 characters is submitted via the form - '
        'the page should display an error message.'
    )


def test_len_short_id_autogenerated_view(client):
    client.post('/', data={
        'original_link': py_url,
    })
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert len(unique_id.short) == 6, (
        'If there is no short link in the form - '
        'short link 6 characters long should be generated.'
    )


@pytest.mark.parametrize('data', [
    ({'url': py_url, 'custom_id': '.,/!?'}),
    ({'url': py_url, 'custom_id': 'Hodor-Hodor'}),
    ({'url': py_url, 'custom_id': 'h@k$r'}),
    ({'url': py_url, 'custom_id': '$'}),
])
def test_invalid_short_url(data, client):
    client.post('/', data=data)
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert not unique_id, (
        'A short link must allow a strictly defined set of characters. '
        'Refer to the quest text.'
    )
